<?php
/**
 * @file
 * Code for the GSB Feature Event Content Type feature.
 */

include_once 'gsb_feature_event_ct.features.inc';

/**
 * Implementation of hook_module_implements_alter()
 */
function gsb_feature_event_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['gsb_feature_event'])) {
      $group = $implementations['gsb_feature_event'];
      unset($implementations['gsb_feature_event']);
      $implementations['gsb_feature_event'] = $group;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for event node edit form.
 */
function gsb_feature_event_ct_form_event_node_form_alter(&$form, &$form_state) {

  $language = $form['language']['#value'];

  // Hide date repeat for now.  Need to figure out how to show the correct date
  // in views before enabling.
  $form['field_event_date']['#after_build'][] = 'gsb_feature_event_ct_hide_date_repeat';

  if (!empty($form['field_person_fac_other'][$language])) {

    foreach ($form['field_person_fac_other'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_person_fac_other'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );

        $form['field_person_fac_other'][$language][$index]['field_first_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        $form['field_person_fac_other'][$language][$index]['field_last_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // remove "n/a" as an option for the fac_or_other
        unset($form['field_person_fac_other'][$language][$index]['field_person_fac_or_other'][$language]['#options']['_none']);

      }

    }
  }

  // We are removing the 'Academic Calendar' term from the list of 'Event Category' terms
  if (isset($form['field_event_category'])) {
    $term = taxonomy_get_term_by_name('Academic Calendar', 'event_category');
    $form['field_event_category'][$language]['#config']['params']['exclude_tid'] = key($term);
  }

}

/**
 * Hides the date repeat field until we can get repeats fixed.
 */
function gsb_feature_event_ct_hide_date_repeat($element, &$form_state) {
  $element[$element['#language']][0]['rrule']['#access'] = FALSE;
  $element[$element['#language']][0]['show_repeat_settings']['#access'] = FALSE;
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function gsb_feature_event_ct_field_formatter_info() {
  return array(
    'gsb_feature_event_ct_date_formatter' => array(
      'label' => t('Custom date formater'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_event_ct_form_node_form_alter(&$form, &$form_state) {
  if (isset($form['#entity_type']) &&  $form['#entity_type'] == 'node') {
    $node = $form['#node'];
    if ($node->type == "event") {
      $form['field_industry']['#access'] = FALSE;
      $form['field_discipline']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function gsb_feature_event_ct_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!isset($element['#bundle']) || $element['#bundle'] != 'event') {
    return;
  }
  if ($element['#field_name'] == 'field_address') {
    // move 'US' to the top of the options list
    $us_option = $element['country']['#options']['US'];
    unset($element['country']['#options']['US']);
    $element['country']['#options'] = array_merge(array('US' => $us_option), $element['country']['#options']);
  }
}

