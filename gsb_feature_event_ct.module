<?php
/**
 * @file
 * Code for the GSB Feature Event Content Type feature.
 */

include_once 'gsb_feature_event_ct.features.inc';

/**
 * Implements hook_menu().
 */
function gsb_feature_event_ct_menu() {
  $items['gsb_feature_event_ct_speaker_lookup/%/%'] = array(
    'title' => 'GSB Feature Event Speaker Lookup',
    'page callback' => 'gsb_feature_event_ct_speaker_lookup',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Looks up info for the Speaker node id
 */
function gsb_feature_event_ct_speaker_lookup($nid,$index) {
  $node = node_load($nid);
  $title = '';
  if ($node->type == 'faculty') {
    $rank = $node->field_rank['und'][0]['value'];
    $tid = $node->field_academic_area_single['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    $title = $rank . ', ' . $term->name;
  }
  else if ($node->type == 'phd_candidate') {
    $tid = $node->field_academic_area_single['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    $title = $term->name;
  }
  else if ($node->type == 'msx_fellows') {
    $date = $node->field_year['und'][0]['value'];
    $date = new DateObject(strtotime($date), 'UTC');
    $year = $date->format('Y');
    $title = 'Class of ' . $year;
  }
  else if ($node->type == 'alumni') {
    $title = $node->field_title_position_single['und'][0]['value'];
  }
  else if ($node->type == 'staff') {
    $entity_id = $node->field_staff_item['und'][0]['value'];
    $entity = entity_load_single('field_collection_item', $entity_id);
    $tid = $entity->field_department_office['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    $position = $entity->field_title_position_single['und'][0]['value'];
    $title = $position . ', ' . $term->name;
  }
  $data = array('nid' => $nid, 'title' => $title, 'index' => $index);
  return drupal_json_output($data);
}

/**
 * Implementation of hook_module_implements_alter()
 */
function gsb_feature_event_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['gsb_feature_event'])) {
      $group = $implementations['gsb_feature_event'];
      unset($implementations['gsb_feature_event']);
      $implementations['gsb_feature_event'] = $group;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for event node edit form.
 */
function gsb_feature_event_ct_form_event_node_form_alter(&$form, &$form_state) {

  $language = $form['language']['#value'];

  // Hide date repeat for now.  Need to figure out how to show the correct date
  // in views before enabling.
  $form['field_event_date']['#after_build'][] = 'gsb_feature_event_ct_hide_date_repeat';

  if (!empty($form['field_person_fac_other'][$language])) {

    foreach ($form['field_person_fac_other'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_person_fac_other'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );

        $form['field_person_fac_other'][$language][$index]['field_first_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        $form['field_person_fac_other'][$language][$index]['field_last_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_person_fac_other[' . $language . '][' . $index . '][field_person_fac_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // remove "n/a" as an option for the fac_or_other
        unset($form['field_person_fac_other'][$language][$index]['field_person_fac_or_other'][$language]['#options']['_none']);

      }

    }
  }

  // We are removing the 'Academic Calendar' term from the list of 'Event Category' terms
  if (isset($form['field_event_category'])) {
    $term = taxonomy_get_term_by_name('Academic Calendar', 'event_category');
    $form['field_event_category'][$language]['#config']['params']['exclude_tid'] = key($term);
  }

}

/**
 * Hides the date repeat field until we can get repeats fixed.
 */
function gsb_feature_event_ct_hide_date_repeat($element, &$form_state) {
  $element[$element['#language']][0]['rrule']['#access'] = FALSE;
  $element[$element['#language']][0]['show_repeat_settings']['#access'] = FALSE;
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function gsb_feature_event_ct_field_formatter_info() {
  return array(
    'gsb_feature_event_ct_date_formatter' => array(
      'label' => t('Custom date formater'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_event_ct_form_node_form_alter(&$form, &$form_state) {
  if (isset($form['#entity_type']) &&  $form['#entity_type'] == 'node') {

    $node = $form['#node'];

    if ($node->type == "event") {

      $language = $form['language']['#value'];

      foreach($form['field_event_location']['und'] as $key => $value) {
        if (is_numeric($key) && $key >= 0) {
          $form['field_event_location']['und'][$key]['field_address']['und'][0]['locality_block']['postal_code']['#title'] = 'Zip Code';
        }
      }

      $form['field_link_single']['#states'] = array(
        'invisible' => array(
          ':input[name="field_event_detail[' . $language . ']"],value="1"' => array('!value' => (string)'1'),
          ':input[name="field_event_detail[' . $language . ']"],value=""' => array('!value' => (string)''),
        ),
        'required' => array(
          ':input[name="field_event_detail[' . $language . ']"]' => array('value' => (string)'1'),
        ),
      );

      $form['field_body']['#states']['required'][':input[name="field_event_detail[' . $language . ']"]'] = array(
        array('value' => (string)'0'),
      );

      // show/hide the event detail related fields

      $hide_detail_fields = array(
        'field_person_ref',
        'field_body',
        'field_event_who_attend',
        'field_event_speakers',
        'field_price',
        'field_link_event_more_info',
        'field_event_attendance_statement',
        'field_schedule',
        'field_event_sponsors',
        'field_email',
        'field_person_title',
        'field_register_url',
        'field_date_time'
      );

      foreach ($hide_detail_fields as $field_name) {
        $form[$field_name]['#states']['invisible'][':input[name="field_event_detail[' . $language . ']"]'] = array(
          array('value' => (string)'1'),
        );
      }

      // show/hide the event location fields

      foreach ($form['field_event_location'][$language] as $key => $value) {
        if (is_numeric($key) && $key >= 0) {
          $form['field_event_location'][$language][$key]['field_link_map']['#states'] = array(
            'invisible' => array(
              ':input[name="field_event_location[und][' . $key . '][field_event_location_type][' . $language . ']"],value="Online"' => array('value' => (string)'Online'),
            )
          );
        }
      }

      // Apply #states for Speakers to show hide fields

      foreach($form['field_event_speakers'][$language] as $key => $value) {
        if (is_numeric($key) && $key >= 0) {
          $form['field_event_speakers'][$language][$key]['field_first_name']['#states'] = array(
            'invisible' => array(
              ':input[name="field_event_speakers[' . $language . '][' . $key . '][field_speakers_person_type][' . $language . ']"]' => array('value' => '0'),
            )
          );
          $form['field_event_speakers'][$language][$key]['field_last_name']['#states'] = array(
            'invisible' => array(
              ':input[name="field_event_speakers[' . $language . '][' . $key . '][field_speakers_person_type][' . $language . ']"]' => array('value' => '0'),
            )
          );

          $form['field_event_speakers'][$language][$key]['field_link_single']['#states'] = array(
            'invisible' => array(
              ':input[name="field_event_speakers[' . $language . '][' . $key . '][field_speakers_person_type][' . $language . ']"]' => array('value' => '0'),
            )
          );

          $form['field_event_speakers'][$language][$key]['field_person_ref']['#states'] = array(
            'invisible' => array(
              ':input[name="field_event_speakers[' . $language . '][' . $key . '][field_speakers_person_type][' . $language . ']"]' => array('value' => '1'),
            )
          );
        }
      }

      $form['field_industry']['#access'] = FALSE;
      $form['field_discipline']['#access'] = FALSE;

      drupal_add_js(drupal_get_path('module', 'gsb_feature_event_ct') . '/js/gsb_feature_event_ct.js');

      // Perform additional validation.
      $form['#validate'][] = 'gsb_feature_event_ct_form_validate';

    }
  }
}

/**
 * Validate callback
 *  - Conditionally validate field.
 */
function gsb_feature_event_ct_form_validate($form, &$form_state) {
  $language = $form['language']['#value'];
  $values = $form_state['values'];
  // Validate the conditional mandatory fields.
  if ($values['field_event_detail'][$language][0]['value'] == '1') {
    if (empty($values['field_link_single'][$language][0]['value'])) {
      $field_label = $form['field_link_single'][$language]['#title'];
      form_set_error('field_link_single]['.$language.'][0][url', $field_label . ' field is required.');
    }
  }
  if ($values['field_event_detail'][$language][0]['value'] == '0') {
    if (empty($values['field_body'][$language][0]['value'])) {
      $field_label = $form['field_body'][$language]['#title'];
      form_set_error('field_body]['.$language.'][0][value', $field_label . ' field is required.');
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function gsb_feature_event_ct_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!isset($element['#bundle']) || $element['#bundle'] != 'event') {
    return;
  }
  if ($element['#field_name'] == 'field_address') {
    // move 'US' to the top of the options list
    $us_option = $element['country']['#options']['US'];
    unset($element['country']['#options']['US']);
    $element['country']['#options'] = array_merge(array('US' => $us_option), $element['country']['#options']);
  }
}

